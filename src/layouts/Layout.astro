---
import "@/css/global.css";

// Enhanced Props interface for better SEO
interface Props {
  title: string;
  description: string;
  keywords?: string;
  ogImage?: string;
  ogType?: string;
  canonical?: string;
  noindex?: boolean;
  structuredData?: any;
}

// Extract props from Astro.props with defaults
const { 
  title, 
  description, 
  keywords = "Colombia, travel, map, departments, interactive map, tourism, travel tracker",
  ogImage = "/colombia-map-icon.svg",
  ogType = "website",
  canonical = Astro.url.href,
  noindex = false,
  structuredData
} = Astro.props as Props;

// Generate structured data for better SEO
const defaultStructuredData = {
  "@context": "https://schema.org",
  "@type": "WebApplication",
  "name": "Colombia Travel Level Map",
  "description": "Interactive map of Colombia to track your travel experiences by department",
  "url": Astro.site?.href || "https://colombia-travel-map.vercel.app",
  "applicationCategory": "Travel",
  "operatingSystem": "Web Browser",
  "offers": {
    "@type": "Offer",
    "price": "0",
    "priceCurrency": "USD"
  },
  "creator": {
    "@type": "Person",
    "name": "Luis Hincapie"
  }
};

const finalStructuredData = structuredData || defaultStructuredData;
---

<html lang="en" transition:animate="none">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- CSS crítico inline para prevenir flash -->
    <style is:inline>
      /* Prevenir flash blanco con estilos críticos inline */
      :root {
        --bg-primary-light: #fbfcff;
        --bg-primary-dark: #0f172a;
        --text-primary-light: #1f2937;
        --text-primary-dark: #f1f5f9;
      }
      
      html {
        color-scheme: light;
      }
      
      html.dark {
        color-scheme: dark;
      }
      
      body {
        margin: 0;
        padding: 0;
        min-height: 100vh;
        background-color: var(--bg-primary-light);
        color: var(--text-primary-light);
        transition: none !important;
      }
      
      html.dark body {
        background-color: var(--bg-primary-dark);
        color: var(--text-primary-dark);
      }
      
      /* Ocultar contenido hasta que el tema esté aplicado */
      body:not(.theme-loaded) {
        visibility: hidden;
      }
      
      /* Mostrar contenido una vez que el tema esté listo */
      body.theme-loaded {
        visibility: visible;
        transition: background-color 0.3s ease, color 0.3s ease;
      }
    </style>
    
    <!-- Script de tema más robusto ejecutado antes que cualquier cosa -->
    <script is:inline>
      (function() {
        // Función para aplicar tema inmediatamente
        function applyTheme() {
          try {
            const stored = localStorage.getItem('theme');
            const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            const theme = stored || (prefersDark ? 'dark' : 'light');
            
            const html = document.documentElement;
            const body = document.body;
            
            // Aplicar clase dark inmediatamente
            html.classList.toggle('dark', theme === 'dark');
            
            // Actualizar meta theme-color según el tema
            const metaThemeColor = document.querySelector('meta[name="theme-color"]');
            if (metaThemeColor) {
              metaThemeColor.setAttribute('content', theme === 'dark' ? '#0f172a' : '#1e40af');
            }
            
            // Actualizar color-scheme
            const metaColorScheme = document.querySelector('meta[name="color-scheme"]');
            if (metaColorScheme) {
              metaColorScheme.setAttribute('content', theme === 'dark' ? 'dark' : 'light');
            }
            
            // Hacer visible el body una vez aplicado el tema
            if (body) {
              body.classList.add('theme-loaded');
            }
            
            // Guardar tema en localStorage si no existía
            if (!stored) {
              localStorage.setItem('theme', theme);
            }
            
            // Hacer tema disponible globalmente
            window.__theme = theme;
            
            return theme;
          } catch (error) {
            console.warn('Error applying theme:', error);
            // Fallback: mostrar contenido aunque haya error
            if (document.body) {
              document.body.classList.add('theme-loaded');
            }
            return 'light';
          }
        }
        
        // Aplicar tema inmediatamente si el DOM ya está listo
        if (document.readyState !== 'loading') {
          applyTheme();
        } else {
          // Si el DOM no está listo, aplicar en DOMContentLoaded
          document.addEventListener('DOMContentLoaded', applyTheme);
        }
        
        // También asegurar que se aplique cuando el body esté disponible
        const observer = new MutationObserver(function(mutations) {
          if (document.body && !document.body.classList.contains('theme-loaded')) {
            applyTheme();
            observer.disconnect();
          }
        });
        
        if (!document.body) {
          observer.observe(document.documentElement, { childList: true, subtree: true });
        }
        
        // Escuchar cambios en la preferencia del sistema
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function(e) {
          if (!localStorage.getItem('theme')) {
            const newTheme = e.matches ? 'dark' : 'light';
            document.documentElement.classList.toggle('dark', e.matches);
            localStorage.setItem('theme', newTheme);
            window.__theme = newTheme;
            
            // Actualizar meta tags
            const metaThemeColor = document.querySelector('meta[name="theme-color"]');
            if (metaThemeColor) {
              metaThemeColor.setAttribute('content', newTheme === 'dark' ? '#0f172a' : '#1e40af');
            }
            
            const metaColorScheme = document.querySelector('meta[name="color-scheme"]');
            if (metaColorScheme) {
              metaColorScheme.setAttribute('content', newTheme);
            }
          }
        });
      })();
    </script>
    
    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    {noindex && <meta name="robots" content="noindex, nofollow" />}
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonical} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={ogType} />
    <meta property="og:url" content={canonical} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(ogImage, Astro.url).href} />
    <meta property="og:site_name" content="Colombia Travel Level Map" />
    <meta property="og:locale" content="en_US" />
    <meta property="og:locale:alternate" content="es_CO" />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonical} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(ogImage, Astro.url).href} />
    
    <!-- Additional Meta Tags (dinámicos según tema) -->
    <meta name="theme-color" content="#1e40af" />
    <meta name="color-scheme" content="light" />
    <meta name="format-detection" content="telephone=no" />
    
    <!-- Preconnect to external domains for performance -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://firebase.googleapis.com" />
    
    <!-- Structured Data -->
    <script type="application/ld+json" is:inline set:html={JSON.stringify(finalStructuredData)} />
    
    <!-- Prefetch critical resources -->
    <link rel="prefetch" href="/colombia-map-icon.svg" />
  </head>
  <body>
    <main>
      <slot />
    </main>
  </body>
</html>
